
Avoid doubly nested if statements
if you can.

With a few simple method
extractions, some renaming,
and some restructuring.

You may not understand all the details
but still understand the basic
idea.

---
Table of contents
---

Small

Blocks and indenting

Do one thing

One level of abstraction per function

Reading code from top to bottom

Switch statements

Use descriptive names

Common Monadic Forms

Flag arguments

Dyadic Functions

Argument Objects

Argument Lists

Verbs and keywords

Have no side effects

Output Arguments

Command Query Separation

Prefer Exceptions to returning error codes

Extract Try/Catch blocks

Error Handling is one thing

The Error.java Dependency magnet

Don't Repeat Yourself

Structured Programming

How do you write functions like that?

--------------

Small

  The first rule of functions
  is that they should be small.

  Second rule is that they
  should be smaller than that.

  Functions should be VERY small.

  They should hardly ever be 20 lines long.

  Each should be transparent and obvious.
  Each told a story.

  2-5 lines would be great
  if possible

Blocks and indenting

  Functions should not be large enough
  to hold nested structures.

  The level the indenting should
  not be greater than one or two.

  Making the function easier to read
  and understand.

Do one thing

  Functions should do one thing.
  They should do it well.
  They should do it only.

  What is the ONE THING that the
  function does?


  Functions that do one thing cannot
  be reasonably divided into sections.

One level of abstraction per function

Reading code from top to bottom

  Every function to be followed
  by those at the next level of abstraction.

  Like subsequent TO paragraphs.

  Difficult to write functions that stay
  at a single level of abstraction.

Switch statements

  It's hard to make small switch
  statements.

  Instead use polymorphism.

  As switch statements tend to grow.

  Often violate
  the Single Responsibility Principle
  and
  Open Closed Principle

  // in SOLID principles

  Switch statements can be tolerated
  if they appear only once,
  are used to create polymorphic
  objects, and are hidden
  behind an inheritance relationship
  so that the rest of the system
  can't see it.

Use descriptive names

  Don't be afraid to make a name long.

  It's better to have a long descriptive name
  than a long descriptive comment.

  You should try several different names
  and read the code with each in place.

  Hunting for good names results
  in favorable restructuring
  of the code.

  Be consistent in your names.

Function arguments

  The ideal number of arguments
  for a function is zero.
  Next is one.

  Then two.

  etc.

  More than three requires
  special justification and then
  shouldn't be used anyway.

  Argument are even harder
  from a testing point of view.

  All the test cases to consider
  all the edge cases and combinations.

Common Monadic Forms

Flag arguments

  Passing a boolean into a function
  is bad practice.

  It complicates the signature
  of the method.

  Proclaims that this function
  does more than one thing.

Dyadic Functions

  A function with two arguments is
  harder to understand.

  NOTE: The parts of the code
  that we ignore are where the
  bugs will hide.

  assertEquals(expected, actual)
  // can be problematic
  // as easy to pass in different order

Triads

  3 arguments are significantly
  harder to understand.

  The issues of ordering, pausing,
  etc.

  Think carefully before specifying
  three parameters.

  Consider

  assertEquals(message, expected, actual)

Argument Objects

  When a function seems to need
  more than two or three arguments,
  often means
  that the arguments ought
  to be wrapped in a class
  of their own.

  Ex:

    Circle makeCircle(double x, double y, double radius);

    into

    Circle makeCircle(Point center, double radius);

  Group variables that are related together.

Argument Lists

  Sometime want to pass a variable
  number of arguments into a function.


  String.format method

  // utilize a List for example

Verbs and keywords

  Choosing good name for a function
  can go a long way toward explaining
  the intent of the function, the order,
  and the intent of the arguments.

  Consider having the parameter names
  listed in the function name.

  Ex:

    assertEquals(expected, actual)

    into

    assertExpectedEqualsActual(expected, actual)

Have no side effects

  Side effects are lies.

  Your function promises to do one thing
  but it also does other hidden things.

  Sometimes unexpected changes to variables
  of its own class.

  Look at the name of the method.
  Think
    -> does every line in the method
      relevant and
      easily implied through
      the function name.

  Side effects creates temporal
  coupling.

  These are confusing as they are
  hidden side effects.

  Instead make it clear in the name
  of the function.

  => DO ONE THING in a function


Output Arguments

  Arguments are often thought of
  as the inputs to a function.

  Sometimes they act as the output.

  // consider references or the explicit,
  // ref and out keywords in C#

  Anything that forces you to check
  the function signature
  is equivalent to a double-take.

  It's a cognitive break and
  should be avoided.

  With OOP, this really should be avoided.

  Output arguments should be avoided.

  If your function must change
  the state of something,
  have it change the state of its
  own object.

Command Query Separation

  Functions should either do something
  or answer something.

  But not both as that often leads
  to confusion.

Prefer Exceptions to returning error codes

  Subtle violation of command query separation.

  Problem is that it leads to deeply
  nested structures.

  When you return an error code,
  the caller must deal with the error
  immediately.

  Instead use exceptions,
  so that the error processing code
  can be separated from the happy path
  code and can be simplified.

Extract Try/Catch blocks

  Ugly coding practice.

  Confuse and mix error processing
  with normal processing.

  Better to extract the bodies
  of the try and catch blocks
  into functions of their own.

Error Handling is one thing

  Functions should do one thing.

  Error handling is one thing.

  Thus a function that handles
  errors should do nothing else.

  So if the keyword try
  exists in the function,
  it should be the very first word
  in the function.

  And that there should be nothing
  after the catch/finally blocks.

The Error.java Dependency magnet

  Problem with Dependency magnets
  is that when an enum (or part of it) changes,
  all those other classes need to
  be recompiled and redeployed.

  When you use exceptions rather than
  error codes, then new exceptions
  are derivatives of the exception
  class.

Don't Repeat Yourself

  It's not always easy to spot
  duplication.

  Still it's a problem as it bloats
  the code and will require multiple
  areas of modification should
  the algorithm ever have to change.

  Readability is enhanced by the
  reduction of that duplication.

  Duplication may be the root of
  all evil in software.

Structured Programming

  For large functions, consider the practice
  of no break or continue statements
  in a loop, only one
  return statement in a function

  If you keep your functions small,
  then the occasional multiple
  return, break, or continue statement
  does no harm.

  It can sometimes be more expressive than
  the single-entry, single-exit rule.

How do you write functions like that?

  Writing software is like any other
  kind of writing.

  The first draft is clumsy and disorganized.

  You restructure it and refine it until
  it reads the way you want it to read.

  When you first write functions, they
  come out long and complicated.

  Lots of indenting and nested loops,
  long argument lists,
  arbitrary names, and duplicated code.

  But have a suite of unit tests that
  cover every one of those clumsy lines
  of code.

  Then refine the code, splitting out functions,
  changing names, eliminating duplication.

  Shrink the methods and reorder them.

  Sometimes break out whole classes,
  all while keeping the tests passing.

  You don't write clean code from the start.


  Your functions will be
  short, well named, and nicely organized.

  Remember your real goal is to tell
  the story of the system.

  
